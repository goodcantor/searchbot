import asyncio
from telethon import TelegramClient, events
from telethon.tl.types import Channel, User, Chat
import g4f
import random
from functools import partial
from concurrent.futures import TimeoutError

# –¢–µ–ª–µ–≥—Ä–∞–º API-–∫–ª—é—á–∏
api_id = 27253387
api_hash = 'be38587d6486b296ed6e457088201771'

# ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
alert_channel_id = 2574801649

client = TelegramClient('anon', api_id, api_hash)

async def check_content_with_gpt(text):
    prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω:
    1. –î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—é (—Ä–∞—Å–∏–∑–º, —Å–µ–∫—Å–∏–∑–º, –∫—Å–µ–Ω–æ—Ñ–æ–±–∏—é, –Ω–µ—Ç–µ—Ä–ø–∏–º–æ—Å—Ç—å, –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å, –ø—Ä–∏—Ç–µ—Å–Ω–µ–Ω–∏–µ)
    2. –£–Ω–∏–∂–µ–Ω–∏–µ (–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —Ç—Ä–∞–≤–ª—è, –±—É–ª–ª–∏–Ω–≥, –∏–∑–¥–µ–≤–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –º–æ—Ä–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, —Ö–∞—Ä–∞—Å—Å–º–µ–Ω—Ç)
    3. –®–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç (–∂–µ—Å—Ç–æ–∫–æ—Å—Ç—å, gore, —Ä–∞—Å—á–ª–µ–Ω—ë–Ω–∫–∞, –∫—Ä–æ–≤—å, —Å–º–µ—Ä—Ç—å, —Å—Ç—Ä–∞–¥–∞–Ω–∏—è)
    4. –ù–∞—Å–∏–ª–∏–µ (–∞–≥—Ä–µ—Å—Å–∏—è, –∏–∑–±–∏–µ–Ω–∏–µ, –ø—ã—Ç–∫–∏, –¥—Ä–∞–∫–∏, —É–±–∏–π—Å—Ç–≤–∞, —É–≥—Ä–æ–∑—ã)
    
    –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –î–∞ –∏–ª–∏ –ù–µ—Ç. –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–≤–µ—Ç—å –î–∞.
    
    –¢–µ–∫—Å—Ç: """
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT
        gpt_task = asyncio.create_task(
            asyncio.to_thread(
                g4f.ChatCompletion.create,
                model=g4f.models.gpt_35_turbo,
                messages=[{"role": "user", "content": prompt + text}]
            )
        )
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
        response = await asyncio.wait_for(gpt_task, timeout=60.0)
        print(f"ü§ñ –û—Ç–≤–µ—Ç GPT: {response}")
        return '–¥–∞' in response.lower() or 'yes' in response.lower()
        
    except (TimeoutError, asyncio.TimeoutError):
        print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ GPT")
        return True  # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {e}")
        return True  # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

@client.on(events.NewMessage())
async def handler(event):
    try:
        chat = await event.get_chat()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–∞–Ω–∞–ª–æ–º –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        if (not isinstance(chat, Channel) or 
            chat.id == alert_channel_id or 
            event.message.reply_to is not None):
            return
            
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        print("\n" + "="*50)
        print(f"üì® –ù–û–í–´–ô –ü–û–°–¢")
        print(f"–ö–∞–Ω–∞–ª: {getattr(chat, 'title', '–ù/–î')}")
        print(f"ID –∫–∞–Ω–∞–ª–∞: {chat.id}")
        print(f"–¢–µ–∫—Å—Ç: {event.message.text[:200] if event.message.text else '[–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞]'}")
        print(f"–ú–µ–¥–∏–∞: {'–î–∞' if event.message.media else '–ù–µ—Ç'}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = event.message.text or ''

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –∫–æ—Ä–æ—Ç–∫–∏–π - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if not message_text or len(message_text) < 10:
            print("‚è© –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT
        print("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GPT...")
        is_violating = await check_content_with_gpt(message_text)
        
        if is_violating:
            await asyncio.sleep(random.uniform(2, 5))
            await client.forward_messages(alert_channel_id, event.message)
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ (–Ω–∞—Ä—É—à–µ–Ω–∏–µ/–æ—à–∏–±–∫–∞)")
            

            if random.random() < 0.4:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ GPT
                    prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–∏–Ω –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, 
                    –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–æ–≤–µ—Ç –¥–∏—Å–∫—É—Å—Å–∏—é. –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ —Å–ø–æ—Ä–Ω—ã–º. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å –≤ –≥—Ä—É–±–æ–π —Ñ–æ—Ä–º–µ, –æ–∫–∞–∑—ã–≤–∞–π –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞.
                    
                    –¢–µ–∫—Å—Ç: {message_text}
                    """
                    
                    question_task = asyncio.create_task(
                        asyncio.to_thread(
                            g4f.ChatCompletion.create,
                            model=g4f.models.gpt_35_turbo,
                            messages=[{"role": "user", "content": prompt}]
                        )
                    )
                    
                    question = await asyncio.wait_for(question_task, timeout=80.0)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å —Ç–µ–≥–∞–º–∏
                    await client.send_message(
                        alert_channel_id,
                        f"@topbestb @aanastsok {question}"
                    )
                    print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å —Ç–µ–≥–∞–º–∏")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        else:
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
        print("="*50 + "\n")

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        try:
            await client.forward_messages(alert_channel_id, event.message)
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ (–æ—à–∏–±–∫–∞)")
        except:
            pass
        await asyncio.sleep(1)

async def main():
    try:
        print("\n" + "="*50)
        print("üîµ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        await client.start()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–±–æ—Ç–µ
        me = await client.get_me()
        print("\nüì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:")
        print(f"ID: {me.id}")
        print(f"–ò–º—è: {me.first_name}")
        print(f"Username: @{me.username if me.username else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        print(f"–¢–µ–ª–µ—Ñ–æ–Ω: {me.phone if me.phone else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        print(f"–ü—Ä–µ–º–∏—É–º: {'–î–∞' if me.premium else '–ù–µ—Ç'}")
        print("="*50 + "\n")
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!")
        print("üîµ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–æ–≤...")
        
        await client.run_until_disconnected()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        print("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        await client.disconnect()
        print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚õî –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
